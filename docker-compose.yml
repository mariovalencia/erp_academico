
services:
  # Backend - Python 3.14
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME:-erp}-backend
    volumes:
      - ./backend:/app
      - backend_data:/app/data
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    env_file:
      - .env
      - ./backend/.env.backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:${POSTGRES_PORT}/${POSTGRES_DB}
      - DEBUG=${DJANGO_DEBUG}
      - SECRET_KEY=${DJANGO_SECRET_KEY}
    depends_on:
      - database
    networks:
      - erp-network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

  # Frontend - Angular 20
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME:-erp}-frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT:-4200}:4200"
    env_file:
      - .env
      - ./frontend/.env.frontend
    environment:
      - API_URL=${API_URL:-http://localhost:8000/api}
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - backend
    networks:
      - ${NETWORK_NAME:-erp-network}
    #command: npm start

  # Database - PostgreSQL 17
  database:
    image: postgres:17
    container_name: ${PROJECT_NAME:-erp}-database
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ${NETWORK_NAME:-erp-network}

  # PGAdmin (Opcional)
  pgadmin:
    image: dpage/pgadmin4
    container_name: ${PROJECT_NAME:-erp}-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - database
    networks:
      - ${NETWORK_NAME:-erp-network}

volumes:
  postgres_data:
  backend_data:

networks:
  erp-network:
    driver: bridge